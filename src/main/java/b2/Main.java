/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package b2;


import b2.main.BackBlaze.BackblazeB2Auth;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

import org.apache.commons.io.FileUtils;

import b2.main.BackBlaze.BackblazeB2;
import b2.main.BackBlaze.models.B2Bucket1;
import b2.main.BackBlaze.models.B2File1;
import b2.main.BackBlaze.models.B2Session1;
import b2.main.BackBlaze.models.B2UploadRequest1;
import b2.main.BackBlaze.models.BucketType1;
import b2.main.BackBlazeB3.fileUploader.BlazeFileUploader;
import b2.main.BackBlazeB3.fileUploader.UploadListener;
import b2.main.BackBlazeB3.uploadModel.UploadResponse;

public class Main {
  
  private static String appKeyId = "005e6f0ff38588b000000000a";
  private static String appKey = "K005k2tpcpfoqMY525/C9Pj5kHbDWXY";

  private static String authorizationToken, apiUrl, uploadUrl, uploadAuthorizationToken, bucketId;
  
    public static void main(String[] args) {

      

      authenticate();

      
    }

    public static byte[] getBytes(InputStream inputStream) throws IOException {
      ByteArrayOutputStream byteBuffer = new ByteArrayOutputStream();
      int bufferSize = 1024;
      byte[] buffer = new byte[bufferSize];

      int len = 0;
      while ((len = inputStream.read(buffer)) != -1) {
          byteBuffer.write(buffer, 0, len);
      }
      return byteBuffer.toByteArray();
  }
  
  // 인증 작업
  private static void authenticate() {
    
    BackblazeB2Auth authentication = new BackblazeB2Auth();

    authentication.setOnAuthStateListener(new BackblazeB2Auth.OnAuthStateListener() {

      @Override
      public void onSuccess(B2Session1 b2Session) {

          System.out.println("Download URL: " + b2Session.getDownloadURL());
          System.out.println("Authentication Token: " + b2Session.getAuthToken());
          System.out.println("API URL: " + b2Session.getAPIURL());
          System.out.println("Account Id: " + b2Session.getAccountID());

          createBucket(b2Session);
      }

      @Override
      public void onFailed(String message) {

      }
    });

    authentication.authenticate();
  }

  // 버킷 생성
  private static void createBucket(B2Session1 b2Session) {
    BackblazeB2 bucketCreation = new BackblazeB2();

    bucketCreation.setOnBucketStateListener(new BackblazeB2.OnCreateBucketStateListener() {
      @Override
      public void onSuccess(String message) {
        System.out.println(message);
      }

      @Override
      public void onFailed(String message) {
        System.out.println(message);
      }
    });

    B2Bucket1 b2Bucket = bucketCreation.createBucket(b2Session, "A2d67hhgnn32804", BucketType1.ALL_PUBLIC);
    System.out.println(b2Bucket.getID());
    System.out.println(b2Bucket.getName());

    getUploadUrl(bucketCreation, b2Session, b2Bucket);
  }


  private static void getUploadUrl(BackblazeB2 backblazeB2, B2Session1 b2Session, B2Bucket1 b2Bucket) {

    B2UploadRequest1 b2UploadRequest = backblazeB2.getUploadURL(b2Session, b2Bucket);

    apiUrl = b2Session.getAPIURL();
    authorizationToken = b2Session.getAuthToken();
    uploadUrl = b2UploadRequest.getUploadURL();
    bucketId = b2Bucket.getID();
    uploadAuthorizationToken = b2UploadRequest.getAuthorizationToken();

    System.out.println("업로드 URL: " + b2UploadRequest.getUploadURL());

    File path = new File("");
    File file = new File(path.getAbsolutePath()+"/src/file/10MB.txt");
    
    if(file.exists()) {
      // uploadFile(backblazeB2, b2UploadRequest, file, "hello/10MB.txt");
      BlazeFileUploader blazeFileUploader = new BlazeFileUploader(authorizationToken, apiUrl, uploadUrl, uploadAuthorizationToken, bucketId);
      blazeFileUploader.setOnUploadingListener(new UploadListener() {
        @Override
        public void onUploadStarted() {
          System.out.println("파일 업로드 시작...");
        }


        @Override
        public void onUploadProgress(int percentage, long progress, long total) {

            System.out.println("uplooooad: "+ percentage + "  " + progress + "   " + total);

        }

        @Override
        public void onUploadFinished(UploadResponse response, boolean allFilesUploaded) {
          
          System.out.println("파일 업로드 완료...");
          blazeFileUploader.finish();
        }

        @Override
        public void onUploadFailed(Exception e) {

        }
    });

      InputStream iStream = null;
      try {
          iStream = FileUtils.openInputStream(file);
          byte[] inputData = getBytes(iStream);
          blazeFileUploader.startUploading(inputData, "4MB.txt");
      } catch (FileNotFoundException e) {
          e.printStackTrace();
      } catch (IOException e) {
          e.printStackTrace();
      }
    } else {
      System.out.println("파일이 없음!!");
    }
    
    
  }


  
    
    // private static void downloadFile(String URL, String authorization, B2File file, File destination)  {
    //     try {
    //         URL url = new URL(URL + "/b2api/v3/b2_download_file_by_id");
    //         HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
    //         connection.setRequestMethod("POST");
    //         connection.setRequestProperty("User-Agent", USER_AGENT);
    //         connection.setRequestProperty("Authorization", authorization);

    //         connection.setDoOutput(true);
    //         DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream());
    //         outputStream.writeBytes(new JSONObject().put("fileId", file.getID()).toString());
    //         outputStream.flush();
    //         outputStream.close();

    //         if(connection.getResponseCode() < 400){
    //             InputStream inputStream =  connection.getInputStream();
    //             OutputStream fileOutputStream = new FileOutputStream(destination);

    //             int read = 0;
    //             byte[] bytes = new byte[1024];

    //             while ((read = inputStream.read(bytes)) != -1) {
    //                 fileOutputStream.write(bytes, 0, read);
    //             }
    //             fileOutputStream.close();
    //             connection.disconnect();
    //         }else{
    //             InputStream errorStream =  connection.getErrorStream();
    //             JSONObject requestResult = inputToJSON(errorStream);

    //             B2APIException exception = new B2APIException(requestResult.getString("message"));
    //             exception.setStatusCode(requestResult.getInt("status"));
    //             exception.setIdentifier(requestResult.getString("code"));
    //             throw exception;
    //         }

    //     } catch (IOException ignored) {}
    // }
}